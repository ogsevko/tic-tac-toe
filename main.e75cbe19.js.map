{"version":3,"sources":["main.js"],"names":["originalBoard","humanPlayer","aiPlayer","winningCombinations","cells","document","querySelectorAll","replay","querySelector","startGame","style","display","Array","from","keys","i","length","innerText","removeProperty","addEventListener","turnClick","square","target","id","turn","setTimeout","checkTie","bestSpot","squareId","player","getElementById","gameWon","checkWin","gameOver","board","plays","reduce","a","e","concat","entries","index","win","every","elem","indexOf","backgroundColor","removeEventListener","declareWinner","winner","emptySquares","filter","s"],"mappings":";AAgHC,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhHD,IAAIA,EACEC,EAAc,IACdC,EAAW,IACXC,EAAsB,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAQC,SAASC,iBAAiB,gBAClCC,EAASF,SAASG,cAAc,WAMtC,SAASC,IACPJ,SAASG,cAAc,WAAWE,MAAMC,QAAU,OAElDX,EAAgBY,MAAMC,KAAKD,MAAM,GAAGE,QAE/B,IAAA,IAAIC,EAAI,EAAGA,EAAIX,EAAMY,OAAQD,IAChCX,EAAMW,GAAGE,UAAY,GACrBb,EAAMW,GAAGL,MAAMQ,eAAe,oBAC9Bd,EAAMW,GAAGI,iBAAiB,QAASC,GAAW,GAIlD,SAASA,EAAUC,GAC8B,iBAApCrB,EAAcqB,EAAOC,OAAOC,MACrCC,EAAKH,EAAOC,OAAOC,GAAItB,GAEvBwB,WAAW,WACJC,KACHF,EAAKG,IAAYzB,IAElB,MAIP,SAASsB,EAAKI,EAAUC,GACtB7B,EAAc4B,GAAYC,EAC1BxB,SAASyB,eAAeF,GAAUX,UAAYY,EAExCE,IAAAA,EAAUC,EAAShC,EAAe6B,GAEpCE,GACFE,EAASF,GAIb,SAASC,EAASE,EAAOL,GACjBM,IADyB,EACzBA,EAAQD,EAAME,OAAO,SAACC,EAAGC,EAAGvB,GAC/BuB,OAAAA,IAAMT,EAAUQ,EAAEE,OAAOxB,GAAKsB,GAAI,IACjCN,EAAU,KAEa5B,EAAAA,EAAAA,EAAoBqC,WALhB,IAK2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAA,IAAA,EAAA,EAAA,EAAA,MAAA,GAA9CC,EAA8C,EAAA,GACpDC,GADoD,EAAA,GAChDC,MAAM,SAAAC,GAAQT,OAAAA,EAAMU,QAAQD,IAAS,IAAI,CAC/Cb,EAAU,CACRU,MAAOA,EACPZ,OAAQA,GAEV,QAX2B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAexBE,OAAAA,EAGT,SAASE,EAASF,GACI5B,IADK,EACLA,EAAAA,EAAAA,EAAoB4B,EAAQU,QADvB,IAC+B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAA7CA,IAAAA,EAA6C,EAAA,MACtDpC,SAASyB,eAAeW,GAAO/B,MAAMoC,gBACjCf,EAAQF,SAAW5B,EAAc,OAAS,OAHvB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAMpB,IAAA,IAAIc,EAAI,EAAGA,EAAIX,EAAMY,OAAQD,IAChCX,EAAMW,GAAGgC,oBAAoB,QAAS3B,GAAW,GAGnD4B,EAAcjB,EAAQF,SAAW5B,EAAc,WAAa,aAG9D,SAAS+C,EAAcC,GACrB5C,SAASG,cAAc,WAAWE,MAAMC,QAAU,QAClDN,SAASG,cAAc,iBAAiBS,UAAYgC,EAGtD,SAASC,IACAlD,OAAAA,EAAcmD,OAAO,SAAAC,GAAK,MAAa,iBAANA,IAG1C,SAASzB,IACAuB,OAAAA,IAAe,GAGxB,SAASxB,IACHwB,GAA0B,IAA1BA,IAAelC,OAAc,CAC1B,IAAA,IAAID,EAAI,EAAGA,EAAIX,EAAMY,OAAQD,IAChCX,EAAMW,GAAGL,MAAMoC,gBAAkB,QACjC1C,EAAMW,GAAGgC,oBAAoB,QAAS3B,GAAW,GAI5C,OAFP4B,EAAc,eAEP,EAGF,OAAA,EA9FTzC,EAAOY,iBAAiB,QAASV,GAEjCA","file":"main.e75cbe19.js","sourceRoot":"../src","sourcesContent":["let originalBoard;\nconst humanPlayer = 'O';\nconst aiPlayer = 'X';\nconst winningCombinations = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [6, 4, 2],\n];\n\nconst cells = document.querySelectorAll('.board__cell');\nconst replay = document.querySelector('.replay');\n\nreplay.addEventListener('click', startGame);\n\nstartGame();\n\nfunction startGame() {\n  document.querySelector('.winner').style.display = 'none';\n\n  originalBoard = Array.from(Array(9).keys());\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].innerText = '';\n    cells[i].style.removeProperty('background-color');\n    cells[i].addEventListener('click', turnClick, false);\n  }\n}\n\nfunction turnClick(square) {\n  if (typeof originalBoard[square.target.id] === 'number') {\n    turn(square.target.id, humanPlayer);\n\n    setTimeout(() => {\n      if (!checkTie()) {\n        turn(bestSpot(), aiPlayer);\n      }\n    }, 100);\n  }\n}\n\nfunction turn(squareId, player) {\n  originalBoard[squareId] = player;\n  document.getElementById(squareId).innerText = player;\n\n  const gameWon = checkWin(originalBoard, player);\n\n  if (gameWon) {\n    gameOver(gameWon);\n  }\n}\n\nfunction checkWin(board, player) {\n  const plays = board.reduce((a, e, i) => (\n    (e === player) ? a.concat(i) : a), []);\n  let gameWon = null;\n\n  for (const [index, win] of winningCombinations.entries()) {\n    if (win.every(elem => plays.indexOf(elem) > -1)) {\n      gameWon = {\n        index: index,\n        player: player,\n      };\n      break;\n    }\n  }\n\n  return gameWon;\n}\n\nfunction gameOver(gameWon) {\n  for (const index of winningCombinations[gameWon.index]) {\n    document.getElementById(index).style.backgroundColor\n      = gameWon.player === humanPlayer ? 'blue' : 'red';\n  }\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].removeEventListener('click', turnClick, false);\n  }\n\n  declareWinner(gameWon.player === humanPlayer ? 'You win!' : 'You lose!');\n}\n\nfunction declareWinner(winner) {\n  document.querySelector('.winner').style.display = 'block';\n  document.querySelector('.winner__name').innerText = winner;\n}\n\nfunction emptySquares() {\n  return originalBoard.filter(s => typeof s === 'number');\n}\n\nfunction bestSpot() {\n  return emptySquares()[0];\n}\n\nfunction checkTie() {\n  if (emptySquares().length === 0) {\n    for (let i = 0; i < cells.length; i++) {\n      cells[i].style.backgroundColor = 'green';\n      cells[i].removeEventListener('click', turnClick, false);\n    }\n    declareWinner('It\\'s a tie');\n\n    return true;\n  }\n\n  return false;\n}\n"]}